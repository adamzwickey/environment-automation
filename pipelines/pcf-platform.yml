groups:
- name: full-pcf
  jobs:
  - fetch-platform-automation
  - bootstrap-terraform-state
  - create-infrastructure
  - wipe-env
  - fetch-pks
- name: infrastructure
  jobs:
  - bootstrap-terraform-state
  - create-infrastructure
  - wipe-env
- name: pks
  jobs:
  - fetch-pks
- name: pas
  jobs:
- name: manage-env
  jobs:
- name: bootstrap-demos
  jobs:

resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: daily
  type: time
  source:
    interval: 24h
- name: terraform-state
  type: gcs-resource
  source:
    bucket: ((state_bucket))
    json_key: ((gcp_json_key))
    versioned_file: terraform.tfstate
- name: environment-automation
  type: git
  source:
    uri: git@github.com:azwickey-pivotal/environment-automation.git
    branch: master
    private_key: ((github_key))
- name: config
  type: git
  source:
    uri: ((configuration_uri))
    branch: master
    private_key: ((github_key))
    submodules: all
    depth: 1
- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: 2\.(.*)
    sort_by: semver
- name: platform-automation-tasks
  type: gcs-resource
  source:
    bucket: ((bucket))
    json_key: ((gcp_json_key))
    regexp: platform-automation-tasks-(.*).zip
- name: platform-automation-image
  type: gcs-resource
  source:
    bucket: ((bucket))
    json_key: ((gcp_json_key))
    regexp: platform-automation-image-(.*).tgz
- name: pks-product
  type: gcs-resource
  source:
    bucket: ((bucket))
    json_key: ((gcp_json_key))
    regexp: pivotal-container-(.*).pivotal
- name: pks-stemcell
  type: gcs-resource
  source:
    bucket: ((bucket))
    json_key: ((gcp_json_key))
    regexp: pks-stemcell/light-bosh-stemcell-(.*)-google.*\.tgz

jobs:
- name: bootstrap-terraform-state
  serial: true
  plan:
  - get: environment-automation
  - task: create-terraform-state
    params:
      TERRAFORM_STATEFILE_BUCKET: ((state_bucket))
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_json_key))
    file: environment-automation/tasks/create-initial-terraform-state/task.yml

- name: wipe-env
  serial_groups: [terraform]
  ensure:
    put: terraform-state
    params:
      file: wipe-output/*.tfstate
  plan:
  - aggregate:
    - get: environment-automation
    - get: terraform-state
  - task: wipe
    file: environment-automation/tasks/wipe-env/task.yml
    params:
      GCP_PROJECT_ID: ((gcp_project_id))
      GCP_REGION: ((gcp_region))
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_json_key))

- name: create-infrastructure
  serial_groups: [terraform]
  ensure:
    put: terraform-state
    params:
      file: create-infrastructure-output/*.tfstate
  plan:
  - aggregate:
    - get: terraform-state
    - get: environment-automation
  - task: create-infrastructure
    file: environment-automation/tasks/create-infrastructure/task.yml
    params:
      GCP_PROJECT_ID: ((gcp_project_id))
      GCP_REGION: ((gcp_region))
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_json_key))
      GCP_DNS_ZONE_NAME: ((gcp_dns_zone_name))
      GCP_DNS_ZONE_DNS_NAME: ((gcp_dns_zone_dns_name))
      PKS_CLUSTER_NAME: ((pks_cluster_name))

- name: fetch-platform-automation
  # We use the pivnet resource to bootstrap the pipeline,
  # and because this product is part of the pipeline, not the foundation
  plan:
  - get: daily
    trigger: true
  - get: platform-automation-pivnet
  - aggregate:
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz

- name: fetch-pks
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/credhub-interpolate.yml
    params:
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: ((credhub-secret))
      CREDHUB_SERVER: ((credhub-server))
      PREFIX: '/pipeline/vsphere'
      INTERPOLATION_PATH: "download-product-configs"
    input_mapping:
      files: config
    output_mapping:
      interpolated-files: config
  - task: download-pks-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/pks.yml
    output_mapping: {downloaded-stemcell: pks-stemcell}
  - aggregate:
    - put: pks-product
      params:
        file: downloaded-product/*.pivotal
    - put: pks-stemcell
      params:
        file: pks-stemcell/*.tgz
