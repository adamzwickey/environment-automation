groups:
- name: full-pcf
  jobs:
  - fetch-platform-automation
  - bootstrap-terraform-state
  - create-infrastructure
  - delete-install
  - delete-opsman
  - wipe-iaas
  - deploy-opsman
  - configure-director
  - apply-changes-director
  - export-installation
  - upload-and-stage-pas
  - upload-stemcell-pas
  - generate-product-config-pas
  - configure-product-pas
  - disable-errands-pas
  - apply-product-changes-pas
  - export-installation-pas
  - upload-and-stage-pks
  - upload-stemcell-pks
  - generate-product-config-pks
  - configure-product-pks
  - apply-product-changes-pks
  - create-pks-users
  - export-installation-pks
  - upload-and-stage-redis
  - upload-stemcell-redis
  - generate-product-config-redis
  - configure-product-redis
  - disable-errands-redis
  - apply-product-changes-redis
  - export-installation-redis
- name: infrastructure
  jobs:
  - bootstrap-terraform-state
  - create-infrastructure
  - delete-install
  - delete-opsman
  - wipe-iaas
  - deploy-opsman
  - configure-director
  - apply-changes-director
  - export-installation
- name: pks
  jobs:
  - upload-and-stage-pks
  - upload-stemcell-pks
  - generate-product-config-pks
  - configure-product-pks
  - apply-product-changes-pks
  - export-installation-pks
  - create-pks-users
- name: pas
  jobs:
  - upload-and-stage-pas
  - upload-stemcell-pas
  - generate-product-config-pas
  - configure-product-pas
  - disable-errands-pas
  - apply-product-changes-pas
  - export-installation-pas
  - upload-and-stage-redis
  - upload-stemcell-redis
  - generate-product-config-redis
  - configure-product-redis
  - disable-errands-redis
  - apply-product-changes-redis
  - export-installation-redis
- name: marketplace
  jobs:
  - upload-and-stage-redis
  - upload-stemcell-redis
  - generate-product-config-redis
  - configure-product-redis
  - disable-errands-redis
  - apply-product-changes-redis
  - export-installation-redis
- name: manage-env
  jobs:
- name: bootstrap-demos
  jobs:

resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: daily
  type: time
  source:
    interval: 24h
- name: terraform-state
  type: gcs-resource
  source:
    bucket: ((gcp.bucket))
    json_key: ((gcp.json_key))
    versioned_file: terraform.tfstate
- name: environment-automation
  type: git
  source:
    uri: ((github.configuration_uri))
    branch: master
    private_key: ((github.key))
- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: 2\.(.*)
    sort_by: semver
- name: platform-automation-tasks
  type: gcs-resource
  source:
    bucket: ((gcp.bucket))
    json_key: ((gcp.json_key))
    regexp: platform-automation-tasks-(.*).zip
- name: platform-automation-image
  type: gcs-resource
  source:
    bucket: ((gcp.bucket))
    json_key: ((gcp.json_key))
    regexp: platform-automation-image-(.*).tgz
- name: installation
  type: gcs-resource
  source:
    bucket: ((gcp.bucket))
    json_key: ((gcp.json_key))
    regexp: installation-(.*).zip
- name: om-product
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((products.opsman.product_slug))
    product_version: ((products.opsman.product_version))
    sort_by: semver
- name: pas-product
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((products.pas.product_slug))
    product_version: ((products.pas.product_version))
    sort_by: semver
- name: pas-stemcell
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((products.pas.stemcell.product_slug))
    product_version: ((products.pas.stemcell.product_version))
    sort_by: semver
- name: pks-product
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((products.pks.product_slug))
    product_version: ((products.pks.product_version))
    sort_by: semver
- name: pks-stemcell
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((products.pks.stemcell.product_slug))
    product_version: ((products.pks.stemcell.product_version))
    sort_by: semver
- name: redis-product
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((products.redis.product_slug))
    product_version: ((products.redis.product_version))
    sort_by: semver
- name: redis-stemcell
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((products.redis.stemcell.product_slug))
    product_version: ((products.redis.stemcell.product_version))
    sort_by: semver

# reusable stuff
credhub-interpolate: &credhub-interpolate
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  input_mapping:
    files: environment-automation
  params:
    CREDHUB_SERVER: ((credhub.server))
    CREDHUB_CA_CERT: ((credhub.ca_cert))
    CREDHUB_CLIENT: ((credhub.client))
    CREDHUB_SECRET: ((credhub.secret))
    PREFIX: /concourse/((foundation))
    INTERPOLATION_PATH: ((credhub.interpolate_folders))

jobs:
- name: bootstrap-terraform-state
  serial: true
  ensure:
    put: terraform-state
    params:
      file: bootstrap-output/*.tfstate
  plan:
  - get: environment-automation
  - task: create-terraform-state
    params:
      TERRAFORM_STATEFILE_BUCKET: ((gcp.bucket))
      GCP_SERVICE_ACCOUNT_KEY: ((gcp.json_key))
    file: environment-automation/tasks/create-initial-terraform-state/task.yml

- name: delete-install
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: delete-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-installation.yml
    input_mapping:
      config: environment-automation
      env: interpolated-files
      vars: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/((products.opsman.product_slug)).yml

- name: delete-opsman
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
      passed: [delete-install]
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: delete-opsmans
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-vm.yml
    input_mapping:
      state: environment-automation
      config: environment-automation
      vars: interpolated-files
    params:
      OPSMAN_CONFIG_FILE: ((foundation))/products/((products.opsman.product_slug))
      VARS_FILES: vars/((foundation))/vars/((products.opsman.product_slug)).yml
      STATE_FILE: ((foundation))/state/state.yml
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: environment-automation
            file-source: generated-state
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: ((foundation))/state/state.yml
            GIT_AUTHOR_EMAIL: ((github.user.email))
            GIT_AUTHOR_NAME: ((github.user.username))
            COMMIT_MESSAGE: "Add or update state file: state.yml"
        - put: environment-automation
          params:
            repository: configuration-commit
            merge: true

- name: wipe-iaas
  serial_groups: [terraform]
  ensure:
    put: terraform-state
    params:
      file: wipe-output/*.tfstate
  plan:
  - aggregate:
    - get: environment-automation
      passed: [delete-opsman]
    - get: terraform-state
  - task: wipe-iaas
    file: environment-automation/tasks/wipe-env/task.yml
    params:
      GCP_PROJECT_ID: ((gcp.project))
      GCP_REGION: ((gcp.region))
      GCP_SERVICE_ACCOUNT_KEY: ((gcp.json_key))
      AZ_LIST: ((gcp.az_list))

- name: create-infrastructure
  serial_groups: [terraform]
  ensure:
    put: terraform-state
    params:
      file: create-infrastructure-output/*.tfstate
  plan:
  - aggregate:
    - get: terraform-state
    - get: environment-automation
  - task: create-infrastructure
    file: environment-automation/tasks/create-infrastructure/task.yml
    params:
      GCP_PROJECT_ID: ((gcp.project))
      GCP_REGION: ((gcp.region))
      GCP_SERVICE_ACCOUNT_KEY: ((gcp.json_key))
      GCP_DNS_ZONE_NAME: ((gcp.dns_zone_name))
      GCP_DNS_ZONE_DNS_NAME: ((gcp.dns_zone_dns_name))
      PKS_CLUSTER_NAME: ((pks.cluster_name))
      CREDHUB_SERVER: ((credhub.server))
      CREDHUB_CA_CERT: ((credhub.ca_cert))
      CREDHUB_CLIENT: ((credhub.client))
      CREDHUB_SECRET: ((credhub.secret))
      PREFIX: "/concourse/((foundation))"
      SSL_CERT: ((pas.ssl.cert))
      SSL_PRIVATE_KEY: ((pas.ssl.private_key))
      AZ_LIST: ((gcp.az_list))
      CREATE_GCS_BUCKETS: ((gcp.create_buckets))

- name: deploy-opsman
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: om-product
      params:
        globs:
        - "((products.opsman.product_globs))"
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: create-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: om-product
      state: environment-automation
      config: environment-automation
      vars: interpolated-files
    params:
      OPSMAN_CONFIG_FILE: ((foundation))/products/((products.opsman.product_slug))
      VARS_FILES: vars/((foundation))/vars/((products.opsman.product_slug)).yml
      STATE_FILE: ((foundation))/state/state.yml
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: environment-automation
            file-source: generated-state
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: ((foundation))/state/state.yml
            GIT_AUTHOR_EMAIL: ((github.user.email))
            GIT_AUTHOR_NAME: ((github.user.username))
            COMMIT_MESSAGE: "Add or update state file: state.yml"
        - put: environment-automation
          params:
            repository: configuration-commit
            merge: true
  - task: configure-authentication
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
    input_mapping:
      env: interpolated-files
      config: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/((products.opsman.product_slug)).yml
      AUTH_CONFIG_FILE: ((foundation))/config/auth.yml
    on_success: &make-config-commit
      do:
        - task: staged-director-config
          image: platform-automation-image
          file: platform-automation-tasks/tasks/staged-director-config.yml
          input_mapping:
            env: interpolated-files
          params:
            ENV_FILE: ((foundation))/env/((products.opsman.product_slug)).yml
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: environment-automation
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: director.yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/director-((products.opsman.product_version))
            GIT_AUTHOR_EMAIL: ((github.user.email))
            GIT_AUTHOR_NAME: ((github.user.username))
            COMMIT_MESSAGE: "Add or update product config: director-((products.opsman.product_version))"
        - put: environment-automation
          params:
            repository: configuration-commit
            merge: true

- name: configure-director
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      passed: [deploy-opsman]
      params: {unpack: true}
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: configure-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: environment-automation
      env: interpolated-files
      vars: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/((products.opsman.product_slug)).yml
      DIRECTOR_CONFIG_FILE: ((foundation))/products/director
      VARS_FILES: vars/((foundation))/vars/director.yml

- name: apply-changes-director
  serial: true
  serial_groups: [install-om]
  plan:
  - aggregate:
    - get: platform-automation-image
      passed: [configure-director]
      params: {unpack: true}
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: apply-director-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/ops-manager.yml

# 4 export-installation
- name: export-installation
  serial: true
  serial_groups: [install-om]
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [apply-changes-director]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/ops-manager.yml
      INSTALLATION_FILE: installation-$timestamp.zip
  - put: installation
    params:
      file: installation/installation-$timestamp.zip

- name: fetch-platform-automation
  # We use the pivnet resource to bootstrap the pipeline,
  # and because this product is part of the pipeline, not the foundation
  plan:
  - get: daily
    trigger: true
  - get: platform-automation-pivnet
  - aggregate:
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz

- name: upload-and-stage-pas
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: pas-product
      params:
        globs:
        - "((products.pas.product_globs))"
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pas-product
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/((products.pas.product_slug)).yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pas-product
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/((products.pas.product_slug)).yml
  - task: staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.pas.product_name))
      ENV_FILE: ((foundation))/env/((products.pas.product_slug)).yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success: &make-config-commit
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: environment-automation
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.pas.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.pas.product_name))-((products.pas.product_version))
            GIT_AUTHOR_EMAIL: ((github.user.email))
            GIT_AUTHOR_NAME: ((github.user.username))
            COMMIT_MESSAGE: "Add product config: ((products.pas.product_name))-((products.pas.product_version)).yml"
        - put: environment-automation
          params:
            repository: configuration-commit
            merge: true

- name: upload-stemcell-pas
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-and-stage-pas]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
    - get: pas-stemcell
      params:
        globs:
        - "((products.pas.stemcell.product_globs))"
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: pas-stemcell
    params:
      ENV_FILE: ((foundation))/env/((products.pas.product_slug)).yml

- name: generate-product-config-pas
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-and-stage-pas]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.pas.product_name))
      ENV_FILE: ((foundation))/env/((products.pas.product_slug)).yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success: &make-config-commit
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: environment-automation
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.pas.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.pas.product_name))-((products.pas.product_version))
            GIT_AUTHOR_EMAIL: ((github.user.email))
            GIT_AUTHOR_NAME: ((github.user.username))
            COMMIT_MESSAGE: "Add or update product config: ((products.pas.product_name))-((products.pas.product_version)).yml"
        - put: environment-automation
          params:
            repository: configuration-commit
            merge: true

- name: configure-product-pas
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [generate-product-config-pas]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: configure-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: environment-automation
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: ((foundation))/products/((products.pas.product_slug))
      VARS_FILES: vars/((foundation))/vars/((products.pas.product_slug)).yml
      ENV_FILE: ((foundation))/env/((products.pas.product_slug)).yml

- name: disable-errands-pas
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [configure-product-pas]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: configure-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: environment-automation
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: ((foundation))/products/((products.pas.product_slug))
      VARS_FILES: vars/((foundation))/vars/((products.pas.product_slug))-no-errands.yml
      ENV_FILE: ((foundation))/env/((products.pas.product_slug)).yml

- name: apply-product-changes-pas
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-stemcell-pas, configure-product-pas]
      #trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: apply-product-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/((products.pas.product_slug)).yml
  - task: staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.pas.product_name))
      ENV_FILE: ((foundation))/env/((products.pas.product_slug)).yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success: &make-config-commit
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: environment-automation
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.pas.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.pas.product_name))-((products.pas.product_version))
            GIT_AUTHOR_EMAIL: ((github.user.email))
            GIT_AUTHOR_NAME: ((github.user.username))
            COMMIT_MESSAGE: "Add or update product config: ((products.pas.product_name))-((products.pas.product_version)).yml"
        - put: environment-automation
          params:
            repository: configuration-commit
            merge: true

- name: export-installation-pas
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [apply-product-changes-pas]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/ops-manager.yml
      INSTALLATION_FILE: installation-$timestamp.zip
  - put: installation
    params:
      file: installation/installation-$timestamp.zip

- name: upload-and-stage-pks
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: pks-product
      params:
        globs:
        - "((products.pks.product_globs))"
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pks-product
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/((products.pks.product_slug)).yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pks-product
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/((products.pks.product_slug)).yml
  - task: staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.pks.product_name))
      ENV_FILE: ((foundation))/env/((products.pks.product_slug)).yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success: &make-config-commit
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: environment-automation
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.pks.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.pks.product_name))-((products.pks.product_version))
            GIT_AUTHOR_EMAIL: ((github.user.email))
            GIT_AUTHOR_NAME: ((github.user.username))
            COMMIT_MESSAGE: "Add product config: ((products.pks.product_name))-((products.pks.product_version)).yml"
        - put: environment-automation
          params:
            repository: configuration-commit
            merge: true

- name: upload-stemcell-pks
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-and-stage-pks]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
    - get: pks-stemcell
      params:
        globs:
        - "((products.pks.stemcell.product_globs))"
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: pks-stemcell
    params:
      ENV_FILE: ((foundation))/env/((products.pks.product_slug)).yml

- name: generate-product-config-pks
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-and-stage-pks]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.pks.product_name))
      ENV_FILE: ((foundation))/env/((products.pks.product_slug)).yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success: &make-config-commit
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: environment-automation
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.pks.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.pks.product_name))-((products.pks.product_version))
            GIT_AUTHOR_EMAIL: ((github.user.email))
            GIT_AUTHOR_NAME: ((github.user.username))
            COMMIT_MESSAGE: "Add or update product config: ((products.pks.product_name))-((products.pks.product_version)).yml"
        - put: environment-automation
          params:
            repository: configuration-commit
            merge: true

- name: configure-product-pks
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [generate-product-config-pks]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: configure-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: environment-automation
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: ((foundation))/products/((products.pks.product_slug))
      VARS_FILES: vars/((foundation))/vars/((products.pks.product_slug)).yml
      ENV_FILE: ((foundation))/env/((products.pks.product_slug)).yml

- name: apply-product-changes-pks
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-stemcell-pks, configure-product-pks]
      #trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: apply-product-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/((products.pks.product_slug)).yml
  - task: staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.pks.product_name))
      ENV_FILE: ((foundation))/env/((products.pks.product_slug)).yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success: &make-config-commit
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: environment-automation
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.pks.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.pks.product_name))-((products.pks.product_version))
            GIT_AUTHOR_EMAIL: ((github.user.email))
            GIT_AUTHOR_NAME: ((github.user.username))
            COMMIT_MESSAGE: "Add or update product config: ((products.pks.product_name))-((products.pks.product_version)).yml"
        - put: environment-automation
          params:
            repository: configuration-commit
            merge: true

- name: create-pks-users
  serial: true
  plan:
  - aggregate:
    - get: environment-automation
      passed: [apply-product-changes-pks]
      trigger: true
  - task: create-users
    file: environment-automation/tasks/config-pks-cli-user/task.yml
    params:
      OPSMAN_DOMAIN_OR_IP_ADDRESS: opsman.((gcp.dns_zone_dns_name))
      OPSMAN_USERNAME: admin
      OPSMAN_PASSWORD: ((opsman_password))
      PKS_SYSTEM_DOMAIN: pks.((gcp.dns_zone_dns_name))
      PKS_CLI_USERNAME: ((pks.api.username))
      PKS_CLI_USEREMAIL: ((pks.api.email))
      PKS_CLI_PASSWORD: ((pks.api.password))

- name: export-installation-pks
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [apply-product-changes-pks]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/ops-manager.yml
      INSTALLATION_FILE: installation-$timestamp.zip
  - put: installation
    params:
      file: installation/installation-$timestamp.zip

- name: upload-and-stage-redis
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: redis-product
      params:
        globs:
        - "((products.redis.product_globs))"
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: redis-product
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/((products.redis.product_slug)).yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: redis-product
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/((products.redis.product_slug)).yml
  - task: staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.redis.product_name))
      ENV_FILE: ((foundation))/env/((products.redis.product_slug)).yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success: &make-config-commit
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: environment-automation
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.redis.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.redis.product_name))-((products.redis.product_version))
            GIT_AUTHOR_EMAIL: ((github.user.email))
            GIT_AUTHOR_NAME: ((github.user.username))
            COMMIT_MESSAGE: "Add product config: ((products.redis.product_name))-((products.redis.product_version)).yml"
        - put: environment-automation
          params:
            repository: configuration-commit
            merge: true

- name: upload-stemcell-redis
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-and-stage-redis]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
    - get: redis-stemcell
      params:
        globs:
        - "((products.redis.stemcell.product_globs))"
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: redis-stemcell
    params:
      ENV_FILE: ((foundation))/env/((products.redis.product_slug)).yml

- name: generate-product-config-redis
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-and-stage-redis]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.redis.product_name))
      ENV_FILE: ((foundation))/env/((products.redis.product_slug)).yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success: &make-config-commit
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: environment-automation
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.redis.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.redis.product_name))-((products.redis.product_version))
            GIT_AUTHOR_EMAIL: ((github.user.email))
            GIT_AUTHOR_NAME: ((github.user.username))
            COMMIT_MESSAGE: "Add or update product config: ((products.redis.product_name))-((products.redis.product_version)).yml"
        - put: environment-automation
          params:
            repository: configuration-commit
            merge: true

- name: configure-product-redis
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [generate-product-config-redis]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: configure-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: environment-automation
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: ((foundation))/products/((products.redis.product_slug))
      VARS_FILES: vars/((foundation))/vars/((products.redis.product_slug)).yml
      ENV_FILE: ((foundation))/env/((products.redis.product_slug)).yml

- name: disable-errands-redis
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [configure-product-redis]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: configure-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: environment-automation
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: ((foundation))/products/((products.redis.product_slug))
      VARS_FILES: vars/((foundation))/vars/((products.redis.product_slug))-no-errands.yml
      ENV_FILE: ((foundation))/env/((products.redis.product_slug)).yml

- name: apply-product-changes-redis
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-stemcell-redis, configure-product-redis]
      #trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: apply-product-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/((products.redis.product_slug)).yml
  - task: staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.redis.product_name))
      ENV_FILE: ((foundation))/env/((products.redis.product_slug)).yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success: &make-config-commit
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: environment-automation
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.pks.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.pks.product_name))-((products.pks.product_version))
            GIT_AUTHOR_EMAIL: ((github.user.email))
            GIT_AUTHOR_NAME: ((github.user.username))
            COMMIT_MESSAGE: "Add or update product config: ((products.pks.product_name))-((products.pks.product_version)).yml"
        - put: environment-automation
          params:
            repository: configuration-commit
            merge: true

- name: export-installation-redis
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [apply-product-changes-redis]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: environment-automation
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/ops-manager.yml
      INSTALLATION_FILE: installation-$timestamp.zip
  - put: installation
    params:
      file: installation/installation-$timestamp.zip
